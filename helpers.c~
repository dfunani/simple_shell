#include "main.h"

char *builtin_str[] = {
	"cd",
	"help",
	"exit"
};

int (*builtin_func[]) (char **) = {
	&builtins_cd,
	&builtins_help,
	&builtins_exit
};
/**
 * builtins_handler - handler
 *
 * Return: 1
 *
 */

int builtins_handler(void) {
	return sizeof(builtin_str) / sizeof(char *);
}

/**
 * builtins_cd - entry on blt ins
 * @args: args cd and dir
 *
 * @return Always returns 1, to continue executing.
 *
*/
int builtins_cd(char **args)
{
	if (args[1] == NULL) {
		fprintf(stderr, "lsh: expected argument to \"cd\"\n");
	} else {
		if (chdir(args[1]) != 0) {
			perror("lsh");
		}
	}
	return 1;
}

/**
 * builtins_help - entry
 * @args: help cmd
 *
 * Return: 1
 *
 */

int builtins_help(char __attribute__((unused)) **args)
{
	int i;
	printf("Stephen Brennan's LSH\n");
	printf("Type program names and arguments, and hit enter.\n");
	printf("The following are built in:\n");

	for (i = 0; i < builtins_handler(); i++) {
		printf("  %s\n", builtin_str[i]);
	}

	printf("Use the man command for information on other programs.\n");
	return 1;
}

/**
 * builtins_exit - entry
 * @args: args to cmd
 *
 * Return: 1
 *
 */

int builtins_exit(char __attribute__((unused)) **args)
{
	return 0;
}

/**
 * cmd_launch - launch cmd
 * @args: cmds
 *
 * Returns: 1
 *
 */

int launch_cmd(char **args)
{
	pid_t pid, __attribute__((unused)) wpid;
	int status;

	pid = fork();
	if (pid == 0) {
		if (execvp(args[0], args) == -1) {
			perror("lsh");
		}
		exit(EXIT_FAILURE);
	} else if (pid < 0) {
		perror("lsh");
	} else {
		do {
			wpid = waitpid(pid, &status, WUNTRACED);
		} while (!WIFEXITED(status) && !WIFSIGNALED(status));
	}

	return 1;
}
